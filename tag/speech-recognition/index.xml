<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Speech Recognition | Xiangyu Zhao</title>
    <link>https://victorzxy.github.io/tag/speech-recognition/</link>
      <atom:link href="https://victorzxy.github.io/tag/speech-recognition/index.xml" rel="self" type="application/rss+xml" />
    <description>Speech Recognition</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><copyright>© 2022 Xiangyu Zhao</copyright><lastBuildDate>Wed, 04 Mar 2020 15:30:00 +0000</lastBuildDate>
    <image>
      <url>https://victorzxy.github.io/media/icon_hu445124fc86f9a5e0ef5204885c05fa2c_2309_512x512_fill_lanczos_center_3.png</url>
      <title>Speech Recognition</title>
      <link>https://victorzxy.github.io/tag/speech-recognition/</link>
    </image>
    
    <item>
      <title>Trading Assistant</title>
      <link>https://victorzxy.github.io/talk/trading-assistant/</link>
      <pubDate>Wed, 04 Mar 2020 15:30:00 +0000</pubDate>
      <guid>https://victorzxy.github.io/talk/trading-assistant/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Trading Assistant</title>
      <link>https://victorzxy.github.io/archive/trading-assistant/</link>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://victorzxy.github.io/archive/trading-assistant/</guid>
      <description>&lt;p&gt;This is an web service written in Python and JavaScript, developed for &lt;a href=&#34;https://www.imc.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IMC Trading&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Not all trading happens on the exchanges—sometimes counterparties trade directly through human-to-human communication. In such cases, humans typically use their most natural interface: voice. The Trading Assistant holds market data and responds to queries on demand in a human-like manner, by automating the trader side of the trading communication using modern technologies, including speech recognition, natural language processing, and speech synthesis. The speech recognition and speech synthesis module of the Trading Assistant was built based on the Google Cloud Speech-to-Text and Text-to-Speech APIs. The Trading Assistant also adopts a Naïve Bayes approach for NLP, using word2vec for word embeddings and Siamese BERT for sentence embeddings.&lt;/p&gt;
&lt;p&gt;I was responsible for building the speech recognition and speech synthesis modules, and efficiently built the libraries with high accuracies, and provided clean interfaces that were used conveniently by my NLP and back-end teammates, improving the system&amp;rsquo;s overall performance.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Trading Assistant</title>
      <link>https://victorzxy.github.io/project/trading-assistant/</link>
      <pubDate>Mon, 02 Mar 2020 00:00:00 +0000</pubDate>
      <guid>https://victorzxy.github.io/project/trading-assistant/</guid>
      <description>&lt;p&gt;This is an web service written in Python and JavaScript, developed for &lt;a href=&#34;https://www.imc.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;IMC Trading&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Not all trading happens on the exchanges—sometimes counterparties trade directly through human-to-human communication. In such cases, humans typically use their most natural interface: voice. The Trading Assistant holds market data and responds to queries on demand in a human-like manner, by automating the trader side of the trading communication using modern technologies, including speech recognition, natural language processing, and speech synthesis. The speech recognition and speech synthesis module of the Trading Assistant was built based on the Google Cloud Speech-to-Text and Text-to-Speech APIs. The Trading Assistant also adopts a Naïve Bayes approach for NLP, using word2vec for word embeddings and Siamese BERT for sentence embeddings.&lt;/p&gt;
&lt;p&gt;I was responsible for building the speech recognition and speech synthesis modules, and efficiently built the libraries with high accuracies, and provided clean interfaces that were used conveniently by my NLP and back-end teammates, improving the system&amp;rsquo;s overall performance.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
